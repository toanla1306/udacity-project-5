version: '2.1'
orbs:
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3
  # aws-ecr: circleci/aws-ecr@8.1.2

commands:
  aws_cli_credentials:
    steps:
      - run:
          name: install aws cli and configure credential
          command: |
            pip install awscli
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set aws_session_token $AWS_SESSION_TOKEN
            aws configure set region $AWS_DEFAULT_REGION
jobs:
  linter-check-dockerfile:
    docker:
      - image: python:3.7.3-stretch
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys: 
            - v1-dependencies-{{ checksum "requirements.txt" }}
            - v1-dependencies-
      - run:  
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: run lint 
          command: |
            . venv/bin/activate
            make lint
  build-and-push-image-docker:
    docker:
      - image: 'cimg/python:3.10'
        user: root
    steps:
      - checkout
      - aws_cli_credentials
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: false
      - run:
          name: run build docker and push to ecr
          command: |
            docker build . -t project-5-learning-udacity:v1
            aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin "${DOMAIN_REPO_ECR}"
            docker tag project-5-learning-udacity:v1 "${REPOSITORY_ECR}":v1
            docker push "${REPOSITORY_ECR}":v1
  create-cluster:
    docker:
      - image: 'cimg/python:3.10'
    steps:
      - checkout
      - aws_cli_credentials
      - aws-eks/create-cluster:
          cluster-name: cluster-project-5
          aws-region: us-east-2
          # node-ami: ami-052efd3df9dad4825
          node-type: t2.micro
          nodes-min: 2
          nodes-max: 3
          ssh-public-key: project-3-keypem
  create-deployment:
    docker: 
      - image: 'cimg/python:3.10'
    steps:
      - checkout
      - aws_cli_credentials
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: cluster-project-5
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          resource-file-path: infrastructure/deployment.yaml
          show-kubectl-command: true
workflows:
  deployment:
    jobs:
      - linter-check-dockerfile
      - build-and-push-image-docker:
          requires:
            - "linter-check-dockerfile"
      - create-cluster:
          requires:
            - "linter-check-dockerfile"
      - create-deployment:
          requires: [build-and-push-image-docker, create-cluster]
